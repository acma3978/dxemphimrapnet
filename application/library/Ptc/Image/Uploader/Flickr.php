<?php/** * Flickr Uploader, used to upload an image to flickr.com * You must have an account to use this *  * @project		Image Uploader * @class		Flickr Uploader * @author		Phan Thanh Cong <chiplove.9xpro@gmail.com> * @version		1.0 * @since		June 12, 2012 * @copyright	chiplove.9xpro*///die('This plugin is comming soon.');/** * To use this plugin, you must create an Flickr API and set Callback method for it*/class Ptc_Image_Uploader_Flickr extends Ptc_Image_Uploader {		public function getPluginName()	{		return 'flickr';	}		public function setApi($api_key, $api_secret)	{		$this->_params['api_key'] 	 = $api_key;		$this->_params['api_secret'] = $api_secret;	}		private $_params = array(		'api_key'		=> 'c7d3122d9a4b39e456899b072eb0a615',		'api_secret'	=> '73ce082640694657',	);		private $_endpoint 			= 'http://api.flickr.com/services/rest/';	private $_endpoint_auth 	= 'http://flickr.com/services/auth/';	private $_endpoint_upload 	= 'http://api.flickr.com/services/upload/';		/**	 * Return login status	*/	public function _doLogin()	{		//$this->session('flickr'.$this->_username, 'BX=23cpkpt7tj2dp&b=3&s=9h; localization=en-us%3Bsg%3Bvn; current_identity=1-1339656125; cookie_session=80384924%3A0a90d0ed7a1b7fcf331b9b3d4bbe9b4d;');		if( ! $this->session('token'.$this->_username))		{			$this->session('token'.$this->_username, $this->_getToken());		}		$this->setCookie($this->session('token'.$this->_username));				return $this->getCookie() != '';	}		protected function _doUpload($imagePath)	{		if( ! $this->getCookie())		{			throw new Exception('You must be login or set cookie value before call the "'.__METHOD__.'" method');		}				$params = array(			'method'		=> 'photos.upload',			'title'			=> basename($imagePath),			'description'	=> 'Uploaded by C-Image Uploader',			/**			 * is_public, is_friend, is_family (optional)    		 * Set to 0 for no, 1 for yes. Specifies who can view the photo.			*/			'is_public'		=> 1,			/**			 * content_type (optional)    		 * Set to 1 for Photo, 2 for Screenshot, or 3 for Other.			*/			'content_type'	=> 1,			'auth_token'	=> $this->session('token'.$this->_username),		);		$params = $this->_params + $params;		unset($params['api_secret']);				$params['format'] = 'php_serial';		ksort($params);		$params['api_sig'] = $this->_getApiSig($params);		$params['photo']	= '@'.$imagePath;				$this->_http->reset();		$this->_http->setSubmitMultipart();		$this->_http->setParams($params);		$this->_http->execute($this->_endpoint_upload);				$photoid = 0;		if( preg_match('#<photoid>([^<]+)</photoid>#', $this->_http->getResult(), $match))		{			$photoid = $match[1];		}				try 		{			$result = $this->_getSize($photoid);		}		catch(Exception $e)		{			return FALSE;		}		return $result;	}		protected function _doTransload($imageUrl)	{		throw new Exception(__METHOD__. ' Comming soon.');	}		/**	 * These are all size of flickr image url	 *		Square 			75x75 			http://farm2.staticflickr.com/1103/567229075_2cf8456f01_s.jpg 		Large Square 	150x150			http://farm2.staticflickr.com/1103/567229075_2cf8456f01_q.jpg 		Thumbnail 		100x75 			http://farm2.staticflickr.com/1103/567229075_2cf8456f01_t.jpg 		Small 			240x180 		http://farm2.staticflickr.com/1103/567229075_2cf8456f01_m.jpg 		Small 			320 320x240 	http://farm2.staticflickr.com/1103/567229075_2cf8456f01_n.jpg 		Medium 			500x375 		http://farm2.staticflickr.com/1103/567229075_2cf8456f01.jpg 		Medium 640 		640x480 		http://farm2.staticflickr.com/1103/567229075_2cf8456f01_z.jpg?zz=1 		Medium 800 		800x600 		http://farm2.staticflickr.com/1103/567229075_2cf8456f01_c.jpg 		Large		 	1024x768 		http://farm2.staticflickr.com/1103/567229075_2cf8456f01_b.jpg 		Original 		2400x1800 		http://farm2.staticflickr.com/1103/567229075_6dc09dc6da_o.jpg (PRO)	 *	 * @param	string		photoid	 * @param	sttring		size of image url (s, q, t, m ...etc). Some size must be require flickr PRO	 * @return 	array		array of sizes	*/	private function _getSizes($photoid, $size = '')	{		$response = unserialize($this->_callMethod('photos.getSizes', array(			'photo_id'	=> $photoid		)));		if($response === FALSE OR isset($response['message']))		{			throw new Exception($response['message']);		}		return $response;		}		/**	 * Get one photourl by size	 *	 * @param	string	photoid	 * @param	string	size of image needed (Default return max size allowed)	 * @param	boolean|string	false if size not exists or photo url	*/	private function _getSize($photoid, $size = '')	{		$response = $this->_getSizes($photoid, $size);		$sizes = count($response['sizes']['size']);		$image = $response['sizes']['size'][$sizes-1]['source'];				return $image;	}			/**	 * Get token with permission	 *	 * @return	*/    private function _getFrob()	{		$response = unserialize($this->_callMethod('auth.getFrob'));		if($response['stat'] != 'ok')		{			throw new Exception($response['message']);		}		return $response['frob']['_content'];	}		/**	 * Get token by CURL (do not redirect to flickr)	 *	 * @return	string	auth_token string	*/	private function _getToken($perms = 'write')	{		$http = $this->_http;				$frob = $this->_getFrob();		$authURL = $this->_getAuthUrl('write', $frob);				$http->reset();		$http->execute($authURL);		// cookie for next step		$cookie = $http->getCookie();		$location = $http->getLocation();				// login flickr		$this->_doLoginToFlickr();		$ycookie = $this->session('flickr'.$this->_username);				// silence redirect to flickr with flickr user session to get new frob		$http->reset();		$http->setCookie($ycookie);		$http->execute($location);				if( ($pos = strpos($http->getLocation(), 'frob=')) === FALSE)		{			print_r($http->getHeaders());			echo $http->getResult();			exit;			throw new Exception(__METHOD__.' Authentication failed');		}		$frob = substr($http->getLocation(), $pos + 5);				$result = unserialize($this->_callMethod('auth.getToken', array(			'perms'	=> $perms,			'frob'	=> $frob,		)));		if( ! isset($result['auth']['token']['_content']))		{			throw new Exception(__METHOD__.' '.$result['message']);					}		else		{			return $result['auth']['token']['_content'];		}	}		/**	 * Get token by desktop (must be redirect to flickr and signin by yahoo account)	*/	private function _getToken1()	{		$frob = $this->_getFrob();		if(isset($_GET['frob']))		{			$frob = $_GET['frob'];		}		else		{			$frob = $this->_getFrob();			$authUrl = $this->_getAuthUrl('write', $frob);			header('Location: '.$authUrl);		}		$result = unserialize($this->_callMethod('auth.getToken', array(			'perms'	=> 'write',			'frob'	=> $frob,		)));				if( ! isset($result['auth']['token']['_content']))		{			throw new Exception(__METHOD__.' '.$result['message']);					}		else		{			return $result['auth']['token']['_content'];		}	}		private function _getAuthUrl($perms, $frob)	{		$params = array(			'api_key'	=> $this->_params['api_key'],			'perms'		=> $perms,			'frob'		=> $frob,		);		$params['format'] = 'php_serial';		ksort($params);		$params['api_sig'] = $this->_getApiSig($params);				$query = http_build_query($params);		return $this->_endpoint_auth.($query ? '?'.$query : '');	}		/**	 * Method listed here: http://www.flickr.com/services/api/	 * Eg: flickr.auth.getToken	 *	 * @param	string	method name (getToken)	 * @param	array	params for sending	*/	private function _callMethod($method, array $params = array())	{		$params['method'] = 'flickr.'.$method;		$params = $this->_params + $params;				unset($params['api_secret']);				$params['format'] = 'php_serial';		ksort($params);				$params['api_sig'] = $this->_getApiSig($params);				$this->_http->reset();		$this->_http->useCurl(TRUE);		$this->_http->setParams($params);		$this->_http->execute($this->_endpoint, 'GET');		//var_dump($this->_http);		return $this->_http->getResult();	}		/**	 * Generate api_sig from reguest parameters	 *	 * @param	array	array of request parameters	 * @return	string	api_sig	*/	private function _getApiSig(array $params)	{		$api_sig = $this->_params['api_secret'];		foreach($params as $key => $value)		{			$api_sig .= $key.$value;		}		$api_sig = md5($api_sig);		return $api_sig;	}			/**	 * To use Flickr API, user must be logged in.	 *	 * @return	boolean		login status. If failed, throw new Exception	*/	private function _doLoginToFlickr()	{		if($this->session('flickr'.$this->_username))		{			return $this->_loginStatus = TRUE;		}		$http = $this->_http;				if( ! $this->session('ylogin'.$this->_username))		{			// Step 1: get Yahoo login url			$http->reset();			$http->execute('http://www.flickr.com/signin/');						// get cookie response and header location			$cookie = $http->getCookie();			$location = $http->getHeaders('location');						// Step 2: read login page and fetch fields to submit			$http->reset();			$http->setCookie($cookie);			$http->execute($location);						// get cookie response and header location			$cookie = $http->getCookie();			$location = 'https://login.yahoo.com/config/login?';						$form = $http->cutString($http->getResult(), '<form method="post"', '</form>');			$count = preg_match_all('<input.*?name="([^"]*)".*?value="([^"]*)">', $form, $matches);			$params = array_combine($matches[1], $matches[2]);			$params['login'] 	= $this->_username;			$params['passwd']   = $this->_password;			$params['save'] 	= '';						// Step 3: submit login			$http->reset();			$http->setCookie($cookie);			$http->setParams($params);			$http->execute($location, 'POST');						// get cookie response and header location			$cookie 	= $http->getCookie();			$location 	= $http->getLocation();						if(empty($location))			{				print_r($http->getHeaders());				echo $http->getResult();				exit;				throw new Exception(__METHOD__.' Yahaoo login failed (step: sumbmit login).');			}						$this->session('ylogin'.$this->_username, 1);			$this->session('cookie'.$this->_username, $cookie);			$this->session('location'.$this->_username, $location);		}		$cookie 	= $this->session('cookie'.$this->_username);		$location 	= $this->session('location'.$this->_username);								// Step 4: get Yahoo validate request		$http->reset();		$http->setCookie($cookie);		$http->execute($location);				if(strpos($http->getResult(), '.data=') === FALSE)		{			throw new Exception(__METHOD__.' Yahaoo login failed (step: yahoo validate request)');		}				// Step 5: get flickr location step 1 (?.data=...)		$location = $http->cutString($http->getResult(), 'href="', '"');		$http->reset();		$http->execute($location);				$cookie 	= $http->getCookie();		$location 	= $http->getHeaders('location');				if(strpos($location, '://') === FALSE)		{			$location = 'http://www.flickr.com'.$location;		}		// get cookie for next step		$cookie = str_replace('=deleted', '', $cookie);		preg_match_all('#(BX|localization|current_identity|cookie_session)=(.+?);#', $cookie, $matches);		$cookie = implode(' ', $matches[0]);				// Step 6: Request generate cookie/ hash		$http->reset();		$http->setCookie($cookie);		$http->execute($location);				// check cookie valiate step 2		if($http->getHeaders('location') != '/')		{			throw new Exception(__METHOD__.' Flickr login failed. Please check your flickr account or API (was it created ?)');		}		$this->session('flickr'.$this->_username, $cookie);				return $this->_loginStatus = TRUE;				/*// Step 7: Testing		$http->reset();		$http->setCookie($cookie);		$http->execute('http://www.flickr.com/');		print_r($http->getHeaders());		echo $http->getResult();		exit;*/		}}