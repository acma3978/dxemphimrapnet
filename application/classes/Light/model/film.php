<?php defined('SYSPATH') or die('No direct script access.'); class Light_Model_Film extends Light_Model {		const FETCH_COUNTRYINFO = 1;		const FETCH_USERINFO = 2;    const FETCH_EPISODEINFO = 4;		/**	 * Quick update a field of film	 *	 * @return integer	affected rows	*/	public function update($film_id, $field, $value, $raw_value = FALSE)	{		return $this->_db->write('			UPDATE c_film			SET `' . $field . '` = ' . ($raw_value ? $value : $this->_db->quote($value)) . '			WHERE film_id = ' . $this->_db->quote($film_id) . ' 		');	}		/**	 * Helper method to update views for film and reset views day, week, month	 *	 * @return	integer	affected rows	*/	public function update_views($film_id)	{		$registry_model = $this->_get_registry_model();		$current_time = Light_Application::$time;		$registry_key = 'time_reset_film_views';				$reset_time = array(			'day' 	=> 0,			'week' 	=> 0,			'month' => 0,		); 		try		{			$reset_time = $registry_model->get($registry_key);		}		catch(Exception $e){}				// day		if($reset_time['day'] < strtotime('today'))		{			$reset_time['day'] = $current_time;			$this->_db->write('UPDATE c_film SET `views_day` = 0');		}		// week		$weeks = array(			1 => $first_day = strtotime('first day of this month 00:00:00', $current_time),			2 => strtotime('+1 week', $first_day),			3 => strtotime('+2 week', $first_day),			4 => strtotime('last day of this month 23:59:59', $current_time),		);		for($week = 1; $week < 5; $week ++)		{			if($reset_time['week'] < $weeks[$week] AND $current_time > $weeks[$week])			{				$reset_time['week'] = $current_time;				$this->_db->write('UPDATE c_film SET `views_week` = 0');			}		}		// month		if($reset_time['month'] < $weeks[1])		{			$reset_time['month'] = $current_time;			$this->_db->write('UPDATE c_film SET `views_month` = 0');		}		// set registry		$registry_model->set($registry_key, $reset_time);				$dw = Light_DataWriter::create('Light_DataWriter_Film');		$dw->set('views', 'views + 1', TRUE);		$dw->set('views_day', 'views_day + 1', TRUE);		$dw->set('views_week', 'views_week + 1', TRUE);		$dw->set('views_month', 'views_month + 1', TRUE);		$dw->set_existing('film_id', $film_id);		$dw->save();				return $dw->affected_rows();	}    public function get_all_contents(array $fetch_options = array())    {        $order_clause = $this->get_order_by_clause($fetch_options, 'film.film_id');        return  $this->_db->fetch_all('			SELECT film.*			FROM c_film AS film            WHERE film.pagetext2!=""            ' . $order_clause . '		','film_id');    }	/**	 * Gets array film's infomation by film_id	 *	 * @param integer	 * @return array|boolean - FALSE if film is not exist	*/	public function get_film_by_title_ascii($title_ascii, array $fetch_options = array())	{		$conditions = array('actor_title_ascii' => $title_ascii);		if(isset($fetch_options['active_only']))		{			$conditions['active'] = 1;			unset($fetch_options['active_only']);		}		$items = $this->get_films($conditions,$fetch_options);		foreach($items as &$item) {			$item = Light_Helper_Film::parse($item);		}		return $items;	}	public function get_film_by_id($film_id, array $fetch_options = array())	{		$conditions = array('film_id' => $film_id);		if(isset($fetch_options['active_only']))		{			$conditions['active'] = 1;			unset($fetch_options['active_only']);		}		$items = $this->get_films($conditions, $fetch_options);		return reset($items);	}		/**	 * Get films by array film ids	 *	 * @param 	array - Array of film_id	 * @return 	array 	*/	public function get_films_by_ids(array $film_ids, array $fetch_options = array())	{		if(empty($film_ids))		{			return array();		}		$items = $this->get_films(array('film_id' => $film_ids), $fetch_options);		return $items;	}	public function prepare_film_conditions_for_clause(array $conditions)	{		$sql_conditions = array();		foreach(array('film_id', 'title', 'title_o', 'post_user_id', 'country_id', 'type', 'active', 'year','check_trailer','category_ids') as $field)		{			// add suffix "2" for search			if(isset($conditions[$field. '2']))			{				if(is_array($conditions[$field. '2']))				{					$sql_conditions[] = 'film.' . $field . ' LIKE ' . $this->_db->quote_like($conditions[$field.'2'][0], $conditions[$field.'2'][1]);				}				else				{					$sql_conditions[] = 'film.' . $field . ' LIKE ' . $this->_db->quote_like($conditions[$field.'2'], 'lr');				}			}			if(isset($conditions[$field]))			{				if(is_array($conditions[$field]))				{					$sql_conditions[] = 'film.' . $field . ' IN (' . implode(',', $this->_db->quote_map($conditions[$field])) . ')';				}				else				{                    switch($conditions['active']){                        case'episode_die': $sql_conditions[] = 'episode.episode_die = 1';                        break;                        case'check_trailer': $sql_conditions[] = 'film.check_trailer = 1';                        break;                        default:$sql_conditions[] = 'film.' . $field . ' = ' . $this->_db->quote($conditions[$field]);                        break;                    }				}			}		}		// array category		if(isset($conditions['category_id']))		{			$sql_conditions[] = 'FIND_IN_SET(' . $this->_db->quote($conditions['category_id']) . ', film.category_ids)';		}		if (isset($conditions['title_idx'])){			foreach ($conditions['title_idx'] as $key => $value) {				$keyword = preg_replace('#[\s-]+#u', ' ', $value);				$words = explode(' ', $keyword);				$count = count($words);				// nối mấy từ liền nhau lại với nhau				$word_len = ($count <= 3) ? 2 : 3;				$advanced_query = '';				if($count >= 3)				{					$temp = array();					for($i = 0; $i < $count; $i++)					{						$temp[] = $words[$i];						if(count($temp) >= $word_len)						{							$_two_word 		  = $this->_db->quote_like(implode(' ', $temp));							$_two_word_ascii  = $this->_db->quote_like(Light_Helper_Base::remove_accent_vn($_two_word));							$advanced_query .= '								OR film.title_ascii LIKE ' . $_two_word_ascii . '								OR film.title_o_ascii LIKE ' . $_two_word_ascii . '							';														$temp = array();						}					}				}			}			$sql_conditions[] = '				film.title_lower LIKE ' . $this->_db->quote_like($keyword) . '				OR film.title_o_ascii LIKE ' . $this->_db->quote_like($keyword) . '				OR film.title_ascii LIKE ' . $this->_db->quote_like($keyword_ascii) . '				OR FIND_IN_SET(film.tags, ' . $this->_db->quote($keyword) . ')				'.($advanced_query ? $advanced_query : '					OR film.tags LIKE ' . $this->_db->quote_like($keyword) . '					OR film.tags_ascii LIKE ' . $this->_db->quote_like($keyword_ascii) . '				').'			';        }        if (isset($conditions['category_idx'])) {            $sql_conditions[] = 'film.category_ids LIKE ' . $this->_db->quote('%'.$conditions['category_idx'].'%');        }		// options - by name		if(isset($conditions['options']))		{			if( ! is_numeric($conditions['options']))			{				$conditions['options'] = Light_Helper_Film::convert_options_to_bit($conditions['options']);			}			$sql_conditions[] = 'film.options & ' . $this->_db->quote($conditions['options']);		}		if(isset($conditions['actor_title_ascii']))		{			$title_ascii = $conditions['actor_title_ascii'];			$title_ascii = preg_replace('#[\s-]+#u', ' ', $title_ascii);			$title_ascii = Light_Helper_Unicode::lower($title_ascii);			$sql_conditions[] = 'film.actors_ascii LIKE ' . $this->_db->quote_like($title_ascii);		}		// search film		if(isset($conditions['keyword']))		{			$keyword = $conditions['keyword'];			//$keyword = preg_replace('#[^\w]+#u', ' ', $keyword); 			$keyword = preg_replace('#[\s-]+#u', ' ', $keyword);			$keyword = Light_Helper_Unicode::lower($keyword);			$keyword_ascii = Light_Helper_Base::remove_accent_vn($keyword);			/*			$sql_conditions[] = 'MATCH(title_lower, tags, tags_ascii) AGAINST (' . $this->_db->quote($keyword) . ')';			*/						$words = explode(' ', $keyword);			$count = count($words);			// nối mấy từ liền nhau lại với nhau			$word_len = ($count <= 3) ? 2 : 3;			$advanced_query = '';			if($count >= 3)			{				$temp = array();				for($i = 0; $i < $count; $i++)				{					$temp[] = $words[$i];					if(count($temp) >= $word_len)					{						$_two_word 		  = $this->_db->quote_like(implode(' ', $temp));						$_two_word_ascii  = $this->_db->quote_like(Light_Helper_Base::remove_accent_vn($_two_word));						$advanced_query .= '							OR film.title_lower LIKE ' . $_two_word_ascii . '							OR film.title_ascii LIKE ' . $_two_word_ascii . '							OR film.title_o_ascii LIKE  ' . $_two_word_ascii . '							OR film.tags LIKE ' . $_two_word . '							OR film.actors LIKE ' .$_two_word . '							OR film.searched_by_keywords LIKE ' .$_two_word . '						';							$temp = array();					}				}			}			$sql_conditions[] = '				film.title_lower LIKE ' . $this->_db->quote_like($keyword) . '				OR film.title_o LIKE ' . $this->_db->quote_like($keyword) . '				OR film.title_ascii LIKE ' . $this->_db->quote_like($keyword_ascii) . '				OR FIND_IN_SET(film.tags, ' . $this->_db->quote($keyword) . ')				'.($advanced_query ? $advanced_query : '					OR film.tags LIKE ' . $this->_db->quote_like($keyword) . '					OR film.actors LIKE ' . $this->_db->quote_like($keyword) . '					OR film.tags_ascii LIKE ' . $this->_db->quote_like($keyword_ascii) . '					OR film.searched_by_keywords LIKE ' . $this->_db->quote_like($keyword) . '				').'			';		}		return $this->get_conditions_for_clause($sql_conditions);	}		public function prepare_film_join_options(array $fetch_options)	{		$select_fields = '';		$join_tables = '';		if( ! empty($fetch_options['join']))		{				if($fetch_options['join'] & self::FETCH_COUNTRYINFO)			{				$select_fields .= ',                    country.name_ascii AS country_name_ascii,					country.name AS country_names';				$join_tables .= '					LEFT JOIN c_country AS country ON (country.country_id = film.country_id)';			}			if($fetch_options['join'] & self::FETCH_USERINFO)			{				$select_fields .= ',					user.username AS user_username, user.fullname AS user_fullname, user.nickname AS user_nickname';				$join_tables .= '					LEFT JOIN c_user AS user ON (user.user_id = film.post_user_id)';			}            if($fetch_options['join'] & self::FETCH_EPISODEINFO)            {                $select_fields .= ',					episode.name AS episode_name, episode.episode_die AS episode_episode_die';                $join_tables .= '					LEFT JOIN c_episode AS episode ON (episode.film_id = film.film_id)';            }		}		return array(			'select_fields' => $select_fields,			'join_tables'	=> $join_tables,		);	}		protected function _parse_film_select_fields(array $conditions, array $fetch_options = array())	{				$select_fileds = 'film.*';		// reduce MySQL load		if(isset($fetch_options['some_fields']))		{			$select_fileds = 'film.title, film.title_o, film.title_ascii, film.title_o_ascii, film.type, film.year, film.image_url,				film.pagetext, film.liked_times, film.status, film.episode_count, film.episode_latest,				 film.film_id, film.category_ids, film.country_id, film.tags, film.tags_ascii,				film.views, film.views_week, film.views_month, film.views_day			';		}		if(isset($fetch_options['select_fields']) AND is_array($fetch_options['select_fields']))		{			$select_fileds = implode(', ', $fetch_options['select_fields']);					}				$select_fileds .= ', film.type';				/** 		 * temporary 		 * $select_fileds = 'film.title, film.film_id';		 * addition for fulltext search		if( isset($conditions['keyword']))		{			$keyword = $conditions['keyword'];			$keyword = preg_replace('#[^\w]+#u', ' ', $keyword); 			$keyword = preg_replace('#[\s-]+#u', ' ', $keyword); 			$keyword = Light_Helper_Unicode::lower($keyword);			$keyword_ascii = Light_Helper_Base::remove_accent_vn($keyword);						$select_fileds .= ',				MATCH(title_lower) AGAINST (' . $this->_db->quote($keyword) . ') AS rel0,				MATCH(tags) AGAINST (' . $this->_db->quote($keyword) . ') AS rel1,				MATCH(tags_ascii) AGAINST (' . $this->_db->quote($keyword) . ') AS rel2			';		}		*/		return $select_fileds;	}		public function get_films(array $conditions, array $fetch_options = array(), $number = NULL)	{		$join_options = $this->prepare_film_join_options($fetch_options);		$where_clause = $this->prepare_film_conditions_for_clause($conditions);		$limit_options = $this->prepare_limit_fetch_options($fetch_options);		$order_clause = $this->get_order_by_clause($fetch_options, 'film.film_id');		/** fulltext search			$order_clause = 'ORDER BY rel0 DESC, rel1 DESC, rel2 DESC';		**/		$select_fileds = $this->_parse_film_select_fields($conditions, $fetch_options);		return $this->_db->fetch_all($this->limit_query_results('			SELECT ' . $select_fileds . '				' . $join_options['select_fields'] . '			FROM c_film AS film			' . $join_options['join_tables'] . '			WHERE ' . $where_clause . '			' . $order_clause . '		', $limit_options['limit'], $limit_options['offset']		),$number!=TRUE?'film_id':NULL);	}			public function get_count_films(array $conditions = array(), array $fetch_options = array())	{		$join_options = $this->prepare_film_join_options($fetch_options);		$where_clause = $this->prepare_film_conditions_for_clause($conditions);		$count = $this->_db->fetch_one('			SELECT COUNT(film.film_id) AS total			FROM c_film AS film			' . $join_options['join_tables'] . '			WHERE ' . $where_clause . ' 		');		return $count['total'];	}    public function get_count_die()    {        $count = $this->_db->fetch_one('            SELECT COUNT(*) as total            FROM (            SELECT episode.film_id, episode.episode_die FROM c_episode AS episode WHERE episode.episode_die = 1 GROUP BY episode.film_id) as a		');        return $count['total'];    }			/**	 * Gets film ids has similar title, tags with a film id	 *	 * @param	integer	film id	 * @param	integer	limit ids	 * @return	array	list film ids	*/	public function get_similar_films($film_id, $limit = 50)	{		$film = $this->get_film_by_id($film_id);				$sql_conditions = array();				$tags = explode(',', $film['tags']);		$tags_ascii = explode(',', $film['tags_ascii']);		$tags = array_combine($tags, $tags_ascii);		foreach($tags as $tag => $tag_ascii)		{			$sql_conditions[] = 'FIND_IN_SET(' . $this->_db->quote($tag).', film.tags)';			//OR FIND_IN_SET(' . $this->_db->quote($tag_ascii) . ', film.tags_ascii)		}		// same actor		$pattern = str_replace(' ', '\s*', '#(N/?A|Đang cập nhật|Chưa có|Chưa xác định|Unknow|Update|Updating)#iu');		if( ! preg_match($pattern, $film['actors']))		{			$actors = explode(',', $film['actors']);			foreach($actors as $actor)			{				$sql_conditions[] = 'film.actors LIKE '.$this->_db->quote_like($actor, 'lr');			}		}		if(empty($sql_conditions))		{			return array();		}				return $this->_db->fetch_all_keyed('			SELECT film.film_id			FROM c_film AS film			WHERE (' . implode(' OR ', $sql_conditions) . ')  AND film.film_id != ' . $this->_db->quote($film_id) . '		', 'film_id');	}		/**	 * Gets array films by tag_id	 * @return array	*/	public function get_films_by_tag_id($tag_id, array $fetch_options = array())	{		$film_ids = $this->get_film_ids_by_tag_id($tag_id);				return $this->_db->get_films(array('film_ids' => $film_ids), $fetch_options);	}		/**	 * Get array film ids	 * @return array	*/	public function get_film_ids_by_tag_id($tag_id)	{		return $this->_db->fetch_all_keyed('			SELECT filmtag.film_id			FROM c_filmtag AS filmtag			WHERE filmtag.tag_id = ' . $this->_db->quote($tag_id) . '		', 'film_id');	}		/**	 * @return integer	*/	public function get_count_films_by_tag_id($tag_id)	{		$count = $this->_db->fetch_one('			SELECT COUNT(filmtag.film_id) AS total			FROM c_filmtag AS filmtag			WHERE filmtag.tag_id = ' . $this->_db->quote($tag_id) . '		');		return $count['total'];	}    public function get_count_films_by_actor_id($actor_id)    {        $count = $this->_db->fetch_one('			SELECT COUNT(filmactor.film_id) AS total			FROM c_filmactor AS filmactor			WHERE filmactor.actor_id = ' . $this->_db->quote($actor_id) . '		');        return $count['total'];    }	/**	 * @return integer	*/	public function get_count_films_by_category_id($category_id)	{		$count = $this->_db->fetch_one('			SELECT COUNT(filmcategory.film_id) AS total			FROM c_filmcategory AS filmcategory			WHERE filmcategory.category_id = ' . $this->_db->quote($category_id) . '		');				return $count['total'];	}	/**	 * Gets array poster (have post_count greater than zero)	 * @return array	*/	public function get_posters()	{		return $this->_db->fetch_all('			SELECT user.*			FROM c_user AS user			WHERE user.post_count > 0		', 'user_id');	}		/**	 * Gets array value-title film options for options	 * @return array	*/	public function get_film_option_options()	{		$options = Light_Config::get('bitfields.film.options');		$return = array();		foreach($options as $name => $info)		{			$return[$name] = $info['title'];		}		return $return;	}			/**	 * @return integer	*/	public function build_comment_count($film_id)	{		$count = $this->_get_comment_model()->get_count_comments(array('film_id' => $film_id));				$this->_db->write('			UPDATE c_film			SET comment_count = ?			WHERE film_id = ?		', array($count, $film_id));				return $count;			}		/**	 * @return array film ids	*/	public function build_similar_films($film_id)	{		$smiliar_film_ids = $this->get_similar_films($film_id);				$this->_db->write('			UPDATE c_film			SET similar_film_ids = ?			WHERE film_id = ?		', array(implode(',', $smiliar_film_ids), $film_id));				return $smiliar_film_ids;			}			/**	 * Helper method to add an option of film	 *	 * @param	integer 	film id	 * @param	integer		option value 	 * @return	integer		affected rows	*/	public function add_option($film_id, $bit)	{		return $this->_db->write('			UPDATE c_film			SET options = options | ' . $this->_db->quote($bit) . '			WHERE film_id = ' . $this->_db->quote($film_id) . ' 		');	}		/**	 * Helper method to remove an option of film	 *	 * @param	integer 	film id	 * @param	integer		option value 	 * @return	integer		affected rows	*/	public function remove_option($film_id, $bit)	{		return $this->_db->write('			UPDATE c_film			SET options = options & ~ ' . $this->_db->quote($bit) . '			WHERE film_id = ' . $this->_db->quote($film_id) . ' 		');	}		protected function _get_comment_model()	{		return Light_Model::create('Light_Model_Comment');	}		protected function _get_registry_model()	{		return Light_Model::create('Light_Model_Registry');	}}