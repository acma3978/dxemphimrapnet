<?phpclass Light_Helper_Actor {    /**     * Parse and add more keys to $film     * @return array     */    public static function parse(array $film, array $parse_options = array())    {        $config = Light_Config::get('config.film');        $addition = array(            'title'					=> htmlspecialchars($film['title']),            'title_o'				=> htmlspecialchars($film['title_o']),            'description'			=> self::description($film['pagetext']),            'imagefan'			=> $film['imagefan'],            'now_date'			=> Light_Application::$time,            'link'					=> Light_Link::film('film', $film),            'image_url_o' 			=> self::get_image_imgur($film['image_url'],'1'),            'thumb_url_o' 			=> self::get_image_imgur($film['image_url'],'2'),            'small_url_o' 			=> self::get_image_imgur($film['image_url'],'3'),            'image_url' 			=> self::get_image_url($film,'1',$config['img_server']),            'thumb_url' 			=> self::get_image_url($film,'2',$config['img_server']),            'small_url'             => self::get_image_url($film,'3',$config['img_server']),            'infomation' => Light_Helper_String::truncate_str($film['infomation'], 330),            'date_format'			=> date('d-m',$film['last_update']),            'liked_format'			=> number_format($film['liked_times']),            'views_format' 			=> number_format($film['views']),            'views_day_format' 		=> number_format($film['views_day']),            'views_week_format' 	=> number_format($film['views_week']),            'views_month_format' 	=> number_format($film['views_month']),        ) ;        // fake rating        $film['rating'] = 0;        for($i = 5; $i > 0; $i--)        {            if($film['liked_times']/$i >= 1)            {                $film['rating'] = $i*2;                break;            }        }        // category        if(!empty($film['category_ids']))        {            $category_ids = explode(',', $film['category_ids']);            $category_cache = Light_Application::get('categories');            $addition['categories'] = array();            $count = count($category_ids);            foreach($category_ids as $key => $category_id)            {                $category = $category_cache[$category_id];                $category['is_last'] = $key == $count-1;                $addition['categories'][$category_id] = $category;            }        }        // country        if(!empty($film['country_id']))        {            $country_cache = Light_Application::get('countries');            $addition['country'] = $country_cache[$film['country_id']];        }        // tags        if(!empty($parse_options['tags']) AND !empty($film['tags']) AND !empty($film['tags_ascii']))        {            $tags = array_combine(explode(',', $film['tags']), explode(',', $film['tags_ascii']));            $counter = 0;            $count_tags = count($tags);            $addition['tags_link'] = array();            foreach($tags as $title => $title_ascii)            {                $addition['tags_link'][$counter] = array(                    'title'		=> $title,                    'link' 		=> Light_Link::build('tag', array('title_ascii' => $title_ascii)),                    'is_last' 	=> $counter++ == $count_tags-1,                );            }        }        // actors        if(!empty($parse_options['actors']) AND !empty($film['actors']) AND !empty($film['actors_ascii']))        {            $actors = array_combine(explode(',', $film['actors']), explode(',', $film['actors_ascii']));            $counter = 0;            $count_actors = count($actors);            $addition['actors_link'] = array();            foreach($actors as $title => $title_ascii)            {                $profile = Light_Model::create('Light_Model_Actor')->get_actor_by_title($title_ascii);                $addition['actors_link'][$counter] = array(                    'profile'		=> $profile,                    'link' 		=> Light_Link::build('actor', array('title_ascii' => $title_ascii,'actor_id' => $profile['actor_id'])),                    'is_last' 	=> $counter++ == $count_actors-1,                );            }        }        return $addition + $film;    }    public static function split_timeLine($timeline, $type)    {        preg_match('#^[0-9]+#i', $timeline, $matches);        if ($type == 2) {            for ($i = 1; $i <= $matches[0]; $i++) {                $texts[split][$i] = 'táº­p '.$i . ', ';            }        }        return $texts;    }    /**     * Helper method to get image url from $film     * @return string     */    public static function get_image_url(array $film, $is_thumbnail = FALSE, $local = FALSE){        if($local){            if(Light_Config::get('config.film.link_dserver')){                $domain = Light_Config::get('config.config.subdomainImage');            }else{                $domain = URL::base();            }            $url = $film['image'];            if (strpos($url, ".jpg")) {                $url = str_replace(basename('.jpg'), '', $url);            }            if(!empty($url)) {                if ($is_thumbnail == 1) {                    $url .= '.jpg';                } elseif ($is_thumbnail == 2) {                    $url .= '-thumb.jpg';                } elseif ($is_thumbnail == 3) {                    $url .= '-small.jpg';                }                $url = $domain.'images/films/'.$url;            }else{                $url = NULL;            }        }else{            // use picasa            $url = $film['image_url'];            $host = parse_url($url, PHP_URL_HOST);            $url = preg_replace('#https?://' . $host.'#i', 'http://2.bp.blogspot.com', $url);            if(strpos(basename($url), '.'))            {                $url = str_replace(basename($url), '', $url);            }            if(!empty($url)) {                if ($is_thumbnail == 2) {                    $url .= 's300/';                } elseif ($is_thumbnail == 3) {                    $url .= 's50/';                }            }        }        return $url;        // imageshack        $url = $film['image_url2'];        //$url = preg_replace('#img\d+\.#i', 'a.', $url);        $url = preg_replace(            '#http://img([\d]+)\.imageshack.us/img[\d]+/[\d]+/(.*?)$#',            'http://desmond.imageshack.us/Himg$1/scaled.php?server=$1&filename=$2&res=landing',            $url        );        //$url = 'http://www.gmodules.com/gadgets/proxy?refresh=86400&amp;container=ig&amp;url=' . urlencode($url);        return htmlspecialchars($url);    }    public static function get_image_imgur($film, $is_thumbnail = FALSE){        // use imgur        $url = $film;        if(strpos($url,'googleusercontent')!==false){            $host = parse_url($url, PHP_URL_HOST);            $url = preg_replace('#https?://' . $host.'#i', 'http://2.bp.blogspot.com', $url);            if(strpos(basename($url), '.'))            {                $url = str_replace(basename($url), '', $url);            }            if(!empty($url)) {                if ($is_thumbnail == 2) {                    $url .= 's300/';                } elseif ($is_thumbnail == 3) {                    $url .= 's50/';                }            }        }else{            if (strpos($url, ".jpg")) {                $url = str_replace(basename('.jpg'), '', $url);            }            if(!empty($url)){                if ($is_thumbnail == 1) {                    $url .= 'l.jpg';                } elseif ($is_thumbnail == 2) {                    $url .= 'm.jpg';                } elseif ($is_thumbnail == 3) {                    $url .= 's.jpg';                }            }        }        return $url;        return htmlspecialchars($url);    }    /**     * Automatic detect keyword income from google search     *     * @return string     */    public static function detect_keyword_from_search()    {        if(empty($_SERVER['HTTP_REFERER']))        {            return '';        }        $keyword = '';        if( preg_match('#^https?://.*?google\.com.*?/.*?q=(?P<keyword>[^&]+)#i', $_SERVER['HTTP_REFERER'], $match) )        {            $keyword = preg_replace('#[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]#', '', urldecode($match['keyword']));            $keyword = preg_replace('#\s*xem\s+phim\s*|phim\s*3s(\.net)?|(3s)?\.net|\?#u', '', $keyword );            //$keyword = preg_replace('#[^\w]#ui', ' ', $keyword);            $keyword = preg_replace('#[^\x80-\xff\w]|[\s-]+#u', ' ', $keyword);            $keyword = Light_Helper_Unicode::lower($keyword);            if(strpos($keyword , 'http') !== FALSE)            {                $keyword = '';            }        }        return $keyword;    }    /**     * Add keyword income from search to film id     *     * @param	array	film info, includes "search_tags", "film_id"     * @param	string	keyword     * @return	integer|boolean - affected rows if add success     */    public static function add_keyword_to_film(array $film, $keyword)    {        $keyword = trim($keyword);        if( ! isset($film['searched_by_keywords']) OR ! isset($film['film_id']) OR $keyword == '' OR strlen($keyword) > 35 OR strlen($keyword) < 5)        {            return FALSE;        }        if(($search_tags = @unserialize($film['searched_by_keywords'])) === FALSE)        {            $search_tags = array();        }        $search_tags[$keyword] = (isset($search_tags[$keyword]) ? intval($search_tags[$keyword]) : 0) + 1;        $_tags = array();        $_count = array();        foreach($search_tags as $tag => $count)        {            $_tags[] 	= $tag;            $_count[] 	= $count;        }        array_multisort($_count, SORT_DESC, $_tags, SORT_ASC, $search_tags);        $search_tags = array_slice($search_tags, 0, 200);        // update        return Light_Model::create('Light_Model_Film')->update($film['film_id'], 'searched_by_keywords', serialize($search_tags));    }    /**     * Convert options from bit to array name     *     * @param 	integer - bit value     * @return 	array - Array name of option     */    public static function convert_options_to_names($value)    {        $options = Light_Config::get('bitfields.film.options');        $return = array();        foreach($options as $name => $option)        {            if($value & $option['value'])            {                $return[] = $name;            }        }        return $return;    }    public static function get_http_response_code($theURL) {        $headers = get_headers($theURL);        return substr($headers[0], 9, 3);    }    /**     * Convert options to bit value     * 	self::convert_options_to_bit('phim_hot');     *  self::convert_options_to_bit(array('phim_hot', 'phim_chieu_rap'));     *     * @param 	string|array - String name or array name of options     * @return 	integer - bit value     */    public static function convert_options_to_bit($value)    {        $return = 0;        if(is_numeric($value))        {            return $value;        }        if(is_string($value))        {            $value = array($value);        }        if( ! is_array($value))        {            return $return;        }        $options = Light_Config::get('bitfields.film.options');        foreach($value as $name)        {            if(isset($options[$name]['value']))            {                $return |= $options[$name]['value'];            }        }        return $return;    }    /**     * Upload image to server     *     * @param 	string	input name (type = file)     * @param	string  Filename for saving when upload completed (without extension)     * @param	array	@ref     * @return boolean|string - FALSE if upload is failed, otherwise return filename with extension     */    public static function upload_image($field, $filename, &$errors)    {        $config = Light_Config::get('config.film');        $upload = Validation::factory($_FILES)            ->rule($field, 'Upload::valid')            ->rule($field, 'Upload::image')            ->rule($field, 'Upload::size', array(':value', $config['image_upload_size']))            ->rule($field, 'Upload::type', array(':value', $config['image_upload_ext']));        $upload->check();        if($upload->errors('errors'))        {            if(empty($errors))            {                $errors = array();            }            $errors = array_merge($upload->errors('errors'), $errors);            return FALSE;        }        // check size of image        // save temp        $temp_name = uniqid('user' . Light_Visitor::instance()->get('user_id'));        $temp_dir = Light_Helper_File::get_temp_dir();        $temp_file = $temp_dir . $temp_name;        Upload::save($upload['imagefile'], $temp_name, $temp_dir);        return self::_image_process($temp_file, $filename, TRUE);    }    /**     * Leech image from url and save it on server     *     * @param string url source     * @param string filename without extension     * @return boolean|string - FALSE if leech is failed, otherwise return filename with extension     */    public static function leech_image($url, $filename, $film_id)    {        $config = Light_Config::get('config.film');        $filename = Light_Link::translate_to_url($filename, TRUE, TRUE);        $temp_dir = Light_Helper_File::get_temp_dir();        $leech = Light_Helper_File::leech_file($url, $temp_file = $temp_dir . $filename.'.jpg', $error);        if($leech)        {            $mime = File::mime($temp_file);            if(strpos($mime, 'image/') === FALSE)            {                unlink($temp_file);                return FALSE;            }            return self::_image_process($temp_file, $filename, TRUE, $film_id);        }        return FALSE;    }    /**     * Helper method to crop, resize image, thumbnail of film     *     * @param string 	temp file     * @param string	filename without extension     * @param boolean 	delete temp file after processed     * @return boolean|string - FALSE if process is failed, otherwise return filename with extension     */    protected static function _image_process($temp_file, $filename, $delete_temp = FALSE, $film_id)    {        try        {            $config = Light_Config::get('config.film');            $filename = Light_Link::translate_to_url($filename, TRUE, TRUE);            $data_dir = Light_Helper_File::get_data_dir();            $new_filename = $filename; // filename for saving            $folder_basic = $config['image_path'].$film_id.'/';            if(!is_dir($data_dir.$folder_basic)) {                mkdir($data_dir.$folder_basic, 0777);            }            $image = Image::factory($temp_file);            $image->resize($config['image_w']);            //$image->crop($config['image_w'], $config['image_h']); //crop from center            //$image->crop($config['image_w'], $config['image_h'], 0); //crop from top-left            $filename_medium = $new_filename.$config['image_ext'];            $image->save($data_dir .$folder_basic. $filename_medium, $config['image_quality']);            if($delete_temp)            {                unlink($temp_file);            }            //thumb            $filename_thumb = $new_filename.'-thumb'.$config['image_ext'];            $image = Image::factory($data_dir . $folder_basic . $filename_medium);            $image->resize($config['thumb_w']);            //$image->crop($config['thumb_w'], $config['thumb_h'], 0); //crop from top-left            $image->save($data_dir .$folder_basic. $filename_thumb, $config['image_quality']);            //small            $filename_small = $new_filename.'-small'.$config['image_ext'];            $image = Image::factory($data_dir . $folder_basic . $filename_medium);            $image->resize($config['small_w']);            //$image->crop($config['thumb_w'], $config['thumb_h'], 0); //crop from top-left            $image->save($data_dir .$folder_basic. $filename_small, $config['image_quality']);            Light_Application::library('Ptc/Image');            // watermark            $watermark = Ptc_Image::watermark(                $data_dir . $folder_basic. $filename_medium,                $data_dir . 'images/misc/logo_thumb.png',                'rb'            );            if($watermark)            {                return $filename_medium;            }        }        catch(Exception $e)        {            //echo $e->getMessage();        }        return FALSE;    }    /**     * Changes filename of film's images on server     *     * @return string|boolean - FALSE if changes failed, otherwise return filename with extension     */    public static function rename_image_file($oldname, $newname, $film_id)    {        $config = Light_Config::get('config.film');        $data_dir = Light_Helper_File::get_data_dir();        $folder_basic = $config['image_path'].$film_id.'/';        if(strpos($oldname, '.') === FALSE)        {            $oldname .= $config['image_ext'];        }        if(strpos($newname, '.') === FALSE)        {            $newname .= $config['image_ext'];        }        $image_path = $data_dir . $folder_basic;        if( ! file_exists($image_path . $newname))        {            $rename_image = rename($image_path . $oldname,  $image_path . $newname);            $rename_thumb = rename($image_path . $oldname.'-thumb',  $image_path . $newname.'-thumb');            $rename_small = rename($image_path . $oldname.'-small',  $image_path . $newname.'-small');            if($rename_thumb AND $rename_image AND $rename_small)            {                return $newname;            }        }        return FALSE;    }    /**     * Remove film's image on server     * @param string filename     * @return void     */    public static function unlink_image($filename, $film_id)    {        $config = Light_Config::get('config.film');        $data_dir = Light_Helper_File::get_data_dir();        $folder_basic = $config['image_path'].$film_id.'/';        if(strpos($filename, '.') === FALSE)        {            $filename .= $config['image_ext'];        }        if(file_exists($filePath = $data_dir . $folder_basic . $filename))        {            unlink($filePath);        }        if(file_exists($filePath = $data_dir . $folder_basic . $filename))        {            unlink($filePath);        }    }    /**     * Gets description from content text     * @return string     */    public static function description($text, $length = 120)    {        $text = preg_replace('#\[/?(CODE|HTML|QUOTE|PHP|SPOILER|DOWNLOAD)[^\]]*?\]#i', '', $text);        $text = preg_replace("#\r?\n#", ' ', $text);        $text = strip_tags($text);        $text = Light_Helper_String::truncate($text, $length);        $text = htmlspecialchars($text);        return $text;    }    /**     * Upload image to picasa and gets url of image uploaded     * @return string     */    public static function put_image_to_imgur($filename,$film_id)    {        Light_Application::library('ChipVN/autoload');        Light_Application::library('ChipVN/ClassLoader/Loader');        ChipVN_ClassLoader_Loader::registerAutoLoad();        $config = Light_Config::get('config.film');        $data_dir = Light_Helper_File::get_data_dir();        $image_file = $data_dir . $config['image_path'] .$film_id.'/'. $filename;        Light_Application::library('Ptc/Image');        Ptc_Image::watermark(            $data_dir . $config['image_path'] . $image_file,            $data_dir . 'images/misc/logo_thumb.png',            'rb'        );        $uploader = ChipVN_ImageUploader_Manager::make('Imgur');        $uploader->setApi('2d0dd0dbee1d6d4');        $uploader->setSecret('2261ef83da6d1b6c4874f1b86e35ab4051a825be');        $uploader->login('xemphimcuchay4@gmail.com', 'gtlxYrvZcrUmVO4A');        $link = $uploader->upload($image_file);        $link = $uploader->transload($link);        return $link;    }    /**     * Upload image to imageshack and gets url of image uploaded     * @return string     */    public static function put_image_to_imageshack($filename,$film_id)    {        Light_Application::library('Ptc/Loader');        Ptc_Loader::load('Image_Uploader');        $config = Light_Config::get('config.film');        $data_dir = Light_Helper_File::get_data_dir();        $image_file = $data_dir . $config['image_path'] .$film_id.'/'. $filename;        $uploader = Ptc_Image_Uploader::factory('imageshack');        $uploader->setApi('8BFHKNPRd4b2ec9d99aa1c73eab1292aa9d28728'); // api for main site        $link = $uploader->upload($image_file);        return $link;    }}