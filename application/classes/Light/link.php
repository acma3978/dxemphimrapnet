<?php defined('SYSPATH') or die('No direct script access.');/** * Light Link * * @package: 	Light * @author:		Phan Thanh Cong <chiplove.9xpro@gmail.com> * @version:	1.0 */class Light_Link {    /**     * Helper method to easy build film link     *     * @param string - "film" or "watch"     * @param string|array - Array/Query string of params by key-value pairs. Must be require [type]     * @param string|array - Array/Query string of query string by key-value pairs     * @param boolean - Remove accent in params ?     * @param boolean - Includes base url ?     * @return string     */    public static function film($name = 'film', $params = NULL, $query = NULL, $remove_accent = TRUE, $base_url = FALSE)    {        $params = Light_Helper_Array::parse($params);        if(!empty($params['type']))        {            $params['type_name'] = ($params['type'] == 2 ? 'bo' : 'le');        }        return self::build($name, $params, $query, $remove_accent, $base_url);    }    /**     *     */    public static function admin($info = NULL, $params = NULL, $query = NULL, $remove_accent = TRUE, $base_url = FALSE)    {        $info = ltrim($info, '/');        return self::build('admin/' . $info, $params, $query, $remove_accent, $base_url);    }    public static function join_url( $parts, $encode=TRUE )    {        if ( $encode )        {            if ( isset( $parts['user'] ) )                $parts['user']     = rawurlencode( $parts['user'] );            if ( isset( $parts['pass'] ) )                $parts['pass']     = rawurlencode( $parts['pass'] );            if ( isset( $parts['host'] ) &&                !preg_match( '!^(\[[\da-f.:]+\]])|([\da-f.:]+)$!ui', $parts['host'] ) )                $parts['host']     = rawurlencode( $parts['host'] );            if ( !empty( $parts['path'] ) )                $parts['path']     = preg_replace( '!%2F!ui', '/',                    rawurlencode( $parts['path'] ) );            if ( isset( $parts['query'] ) )                $parts['query']    = rawurlencode( $parts['query'] );            if ( isset( $parts['fragment'] ) )                $parts['fragment'] = rawurlencode( $parts['fragment'] );        }        $url = '';        if ( !empty( $parts['scheme'] ) )            $url .= $parts['scheme'] . ':';        if ( isset( $parts['host'] ) )        {            $url .= '//';            if ( isset( $parts['user'] ) )            {                $url .= $parts['user'];                if ( isset( $parts['pass'] ) )                    $url .= ':' . $parts['pass'];                $url .= '@';            }            if ( preg_match( '!^[\da-f]*:[\da-f.:]+$!ui', $parts['host'] ) )                $url .= '[' . $parts['host'] . ']'; // IPv6            else                $url .= $parts['host'];             // IPv4 or name            if ( isset( $parts['port'] ) )                $url .= ':' . $parts['port'];            if ( !empty( $parts['path'] ) && $parts['path'][0] != '/' )                $url .= '/';        }        if ( !empty( $parts['path'] ) )            $url .= $parts['path'];        if ( isset( $parts['query'] ) )            $url .= '?' . $parts['query'];        if ( isset( $parts['fragment'] ) )            $url .= '#' . $parts['fragment'];        return $url;    }    /**     * Build link     *     * @param string $info - <route_name>/<controller>/<action>?<query string>     * @param string|array - Array/Query string of params by key-value pairs     * @param string|array - Array/Query string of query string by key-value pairs     * @param boolean - Remove accent in params ?     * @param boolean - Includes base url ?     * @return string     */    public static function build($info, $params = NULL, $query = NULL, $remove_accent = TRUE, $base_url = FALSE){        if(strpos($info, '?'))        {            $parserd = parse_url($info);            $info 	= $parserd['path'];            $query 	= Light_Helper_Array::parse($parserd['query']) + (array) $query;;        }        $info 	= explode('/', trim($info, '/'));        $route 	= $info[0]; // route name        $params = Light_Helper_Array::parse($params);        $params['controller'] 	= Arr::get($info, 1, Arr::get($params, 'controller'));        $params['action'] 		= Arr::get($info, 2, Arr::get($params, 'action'));        $route = Route::get($route);        if($remove_accent)        {            foreach($route->get_params_name() as $field)            {                if(isset($params[$field]))                {                    $params[$field] = self::translate_to_url($params[$field], TRUE, TRUE);                }            }        }        $uri = $route->uri($params);        // do not use .html . php ..        $uri = rtrim($uri, '/') . '/';        $uri = $uri == '/' ? '' : $uri;        $uri = preg_replace('#\s+#u', '-', $uri);        $uri = $uri . URL::query(Light_Helper_Array::parse($query), FALSE);        if($base_url)        {            return URL::base() . $uri;        }        return urldecode($uri);    }    /**     * Translate title to url     * only remove accent of Vietnam language, keep other language to original     */    public static function translate_to_url($value, $remove_accent = TRUE, $lowercase = TRUE, $delimiter = '-')    {        $value = strip_tags(strval($value)); // remove all html        $value = htmlspecialchars_decode($value);        if($remove_accent)        {            $value = Light_Helper_Unicode::remove_accent($value);            //$value = preg_replace('#[^\w-\s]#iu', '', $value);        }        if($lowercase)        {            $value = Light_Helper_String::lower($value);        }        //$value = preg_replace('#[^\w]+#u', $delimiter, $value); // special chars        $value = preg_replace('#[^\x80-\xff\w]+#', $delimiter, $value); // special chars        $value = trim($value, $delimiter);        return $value;    }}