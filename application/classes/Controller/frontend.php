<?php defined('SYSPATH') or die('No direct script access.');class Controller_Frontend extends Controller_Light {	const AREA = 'frontend';	public $_objectSel = array(        'select_fields' => array(            'film.film_id',            'film.title',            'film.title_ascii',            'film.title_o_ascii',            'film.status',            'film.title_o',            'film.image',            'film.imagefan',            'film.year',            'film.views',            'film.views_day',            'film.views_week',            'film.views_month',        )    );	public function before(){		parent::before();		$this->_caching = $_SERVER['HTTP_HOST'] != 'localhost';		$this->_setup_template();		$this->_register_layout_params();		if(isset($_REQUEST['flush']))		{			$this->_cache->delete_all();			Light_Template::delete_cache();		}		$this->_mobile_process();	}    protected function _mobile_process(){        $cookie_name = 'mobile';        $user_agent = strtolower($_SERVER['HTTP_USER_AGENT']);        // ko phải từ google vào        if(empty($_GET['ref'])) {            setcookie($cookie_name, 1, time() + 600, '/');        } else {            setcookie($cookie_name, 1, time() + 600, '/');        }        if(preg_match('#htc|ipad|iphone|android#i', $_SERVER['HTTP_USER_AGENT'])) {            return FALSE;        } else if(preg_match('#build#i', $_SERVER['HTTP_USER_AGENT'])) {            return TRUE;        } else {            return TRUE;        }    }	/**	 * Setup Light_Template	*/	protected function _setup_template(){        Light_Template::$caching = $_SERVER['HTTP_HOST'] != 'localhost';        Light_Template::$minify = TRUE;        if($this->_mobile_process()==TRUE){            Light_Template::$cache_dir = Light_Config::get('config.skin.cachedir');            Light_Template::$path = 'frontend/' . Light_Config::get('config.skin.frontend');        }else{            Light_Template::$cache_dir = Light_Config::get('config.skin.cachedir_mobile');            Light_Template::$path = 'frontend/' . Light_Config::get('config.skin.frontend_mobile');        }	}	/**	 * Assign global variables	 * @return void	*/	protected function _register_layout_params(){        $film_id = $this->_input->filter_single('film_id', Light_Input::UINT);		$title_ascii = $this->_input->filter_single('title_ascii', Light_Input::STRING);        $fetch_otions = array(            'active_only' => TRUE,            'join' => Light_Model_Film::FETCH_COUNTRYINFO | Light_Model_Film::FETCH_USERINFO,        );        if (empty($film_id) OR !$filminfo = $this->_get_film_model()->get_film_by_id($film_id, $fetch_otions)) {        }		$options = Light_Application::get('options');		if(!$this->_caching OR !$country_cache = $this->_cache->get('country_cache')) {			$country_cache = Light_Application::get('countries');			!$this->_caching OR $this->_cache->set('country_cache', $country_cache);		}		// register list url and make it by variable to easy change		$blocklinks = array(			'phim_chieu_rap',			'phim_bo',			'phim_le',			'phim_moi',		);		$yearr = date('Y') + 5;		for($i = 1980; $i < $yearr; $i++) {			$blocklinks[] = 'phim_' . $i;		}		$blocklinks = array_flip($blocklinks);		foreach(array_keys($blocklinks) as $name) {			$blocklinks[$name] = Light_Link::build('list', array('name' => strtr($name, '_', '-')));		}		// ad location - do not cache		$ad_location = $this->_caching 			? $this->_get_ad_location_for_page() 			: '';		$visitor = Light_Visitor::instance();        if(Light_Config::get('config.censor.cacheLinkImage')){            $cacheImageLink = Light_Config::get('config.config.cacheLinkImage');        }		$params = array(			'url_base'			=> URL::base(),            'cache_link_img'			=> $cacheImageLink,			'route_name'		=> $this->get_route_name(),			'visitor'			=> Light_Visitor::instance(),			'web_title'			=> $options->web_title,				'web_keywords'		=> $options->web_keywords,				'web_description'	=> $options->web_description,				// default			'page_title'		=> $options->web_title,				'page_keywords'		=> $options->web_keywords,				'page_description'	=> $options->web_description,				//'url_canonical'		=> URL::base(),					'request_uri'		=> $this->request->uri() ? $this->request->uri() . '/' : '',			'country_cache'		=> $country_cache,			'blocklinks'		=> $blocklinks,			'ad_location'		=> $ad_location,		);        // Get film Trailer        if(!$this->_caching OR !$phim_trailer = $this->_cache->get('phim_trailer')){            $i = 1;            $count_phim_trailer = $this->_get_film(0, NULL, 5, FALSE, $this->_objectSel["option"] = array(                'order' => array('film.last_update' => 'DESC','film.year' => 'DESC','film.views_day' => 'DESC'),                'some_fields' => TRUE,                'conditions' => array('check_trailer' => 1)            ));            foreach ($count_phim_trailer as $k => $item) {                if($i == 1) {                    $phim_trailer['top'][$i] = $item;                }elseif($i > 1){                    $phim_trailer['last'][$i] = $item;                }                $i++;            }            !$this->_caching OR $this->_cache->set('phim_trailer', $phim_trailer);        }        if(!$top_le_views_week = $this->_cache->get('top_le_views_week')){            $top_le_views_week = $this->_get_film(1, NULL, '10', NULL, $this->_objectSel["option"] = array('order'=>array('film.views_week' => 'DESC', 'film.last_update_episode'=>'DESC')));            !$this->_caching OR $this->_cache->set('top_le_views_week', $top_le_views_week);        }        if(!$top_le_views_month = $this->_cache->get('top_le_views_month')){            $top_le_views_month = $this->_get_film(1, NULL, '10', NULL, $this->_objectSel["option"] = array('order'=>array('film.views_month' => 'DESC', 'film.last_update_episode'=>'DESC')));            !$this->_caching OR $this->_cache->set('top_le_views_month', $top_le_views_month);        }        if(!$top_bo_views_week = $this->_cache->get('top_bo_views_week')){            $top_bo_views_week = $this->_get_film(2, NULL, '10', NULL, $this->_objectSel["option"] = array('order'=>array('film.views_week' => 'DESC', 'film.last_update_episode'=>'DESC')));            !$this->_caching OR $this->_cache->set('top_bo_views_week', $top_bo_views_week);        }        if(!$top_bo_views_month = $this->_cache->get('top_bo_views_month')){            $top_bo_views_month = $this->_get_film(2, NULL, '10', NULL, $this->_objectSel["option"] = array('order'=>array('film.views_month' => 'DESC', 'film.last_update_episode'=>'DESC')));            !$this->_caching OR $this->_cache->set('top_bo_views_month', $top_bo_views_month);        }		$params += array(			'ip_client'				=> Request::$client_ip,            'phim_trailer'          => $phim_trailer,            'top_le_views_week'	    => $top_le_views_week,            'top_le_views_month'	=> $top_le_views_month,            'top_bo_views_week'	    => $top_bo_views_week,            'top_bo_views_month'	=> $top_bo_views_month		);		// tag cloud		if(!$tag_cloud = $this->_cache->get('tag_cloud')){			$tag_cloud = $this->_get_tag_cloud();			if($this->_caching){				$this->_cache->set('tag_cloud', $tag_cloud);			}		}		$params += array(			'tag_cloud'		=> $tag_cloud,		);		$this->_layout_params += $params;	}	public function _get_film($type = 0, $theloai = NULL, $limit = 8, $tnum = FALSE, $options, $number = NULL){		$this->_objectSel["option"] = $options;		if(empty($this->_objectSel['option']['conditions'])){			$conditions = array(				'active' => 1,				'check_trailer' => 0,			);			if($theloai){				$conditions['category_id'] = $theloai;			}		}else{			$conditions = $this->_objectSel['option']['conditions'];		}		if($type > 0){			$conditions['type'] = $type;		}		$fetch_options = array(			'order' => $this->_objectSel['option']['order'],			'limit' => $limit		);		if(is_array($this->_objectSel['select_fields'])){			$fetch_options['select_fields'] = $this->_objectSel['select_fields'];		}		if($options === 'some_fields'){            unset($fetch_options['select_fields']);            $fetch_options['some_fields'] = TRUE;	    }		$films = $this->_get_film_model()->get_films($conditions, $fetch_options, $number);        foreach($films as &$film){            if(empty($fetch_options['select_fields'])){                $film = Light_Helper_Film::parse($film);            }else{                $film = Light_Helper_Film::parse($film,$fetch_options);            }        }		return $films;        //return array_map('Light_Helper_Film::parse', $films);    }    protected function _get_top_views($type = '', $limit = 10, $typefilm = 0){        $conditions = array(            'active' => 1,        );		if($type != '') {			$type = '_' . $type;		}        if($typefilm > 0) {            $conditions['type'] = $typefilm;        }        $fetch_options = array(        	'order' => array(				'film.views' . $type => 'DESC',                'film.last_update_episode' => 'DESC'			),			'limit' => $limit,			'some_fields' => TRUE,        );		$films = $this->_get_film_model()->get_films($conditions, $fetch_options);		$counter = 1;		foreach($films as &$film) {			$film['st'] = $counter;			$film['in_top'] = $counter++ < 4;		}		return array_map('Light_Helper_Film::parse', $films);	}	protected function _get_phim_category($category = 0, $limit = 8){        $conditions = array(            'active'=>'1'        );        if($category > 0) {            $conditions['category_idx'] = $category;        }        $films = $this->_get_film_model()->get_films($conditions, array(            'order' => array(                'film.last_update_episode' => 'DESC'            ),            'limit' => $limit,            'some_fields' => TRUE,        ));        //return $films;        return array_map('Light_Helper_Film::parse', $films);    }	protected function _get_ad_location_for_page(){		$ads = $this->_get_ad_model()->get_ads(array(			'active' => 1,		),array(			'order' => array(				'ad.display_order' => 'ASC',				'ad.start_date' => 'ASC',			)		));				$ad_location = array();		// custom ad - hide ads for vip		if(isset($_COOKIE['cache']) AND isset($_COOKIE['noads']))		{			return $ad_location;		}		foreach($ads as $ad)		{			$ad['code'] = preg_replace('#<!--.*?-->#s', '', $ad['code']);			if( ! isset($ad_location[$ad['slot']]))			{				$ad_location[$ad['slot']] = '';			}			if($ad['pages'] == 'all')			{				$ad_location[$ad['slot']] .= $ad['code'];			}			else 			{				if(in_array($this->get_route_name(), explode(',', $ad['pages'])))				{					$ad_location[$ad['slot']] .= $ad['code'];				}			}		}		return $ad_location;	}	protected function _get_actor_related_title($limit){		$conditions = array(		    'active'=>'1',		);		$films = $this->_get_actor_model()->get_actors($conditions, array(				'order' => array(						'actor.views' => 'DESC',						'actor.last_update' => 'DESC'				),				'limit' => $limit,				'some_fields' => TRUE,		));		foreach($films as &$film) {			$film = Light_Helper_Actor::parse($film);		}		return $films;	}	protected function _get_tag_cloud(){		$tags = $this->_get_tag_model()->get_tags(array(		), array(			'order'	=> array('tag.used_count' => 'DESC'),			'limit' => 20,		));		$_tags = array();		$top = 0; // used_count 		if($st1 = reset($tags))		{			$top = $st1['used_count'];		}		$max_level = 10;		$one_level = 5;//$top/$max_level;				foreach($tags as &$tag)		{			if($tag['title'] == 'phim cấp 3')			{				continue;			}			$tag['link'] = Light_Link::build('tag', $tag);			$tag['level'] = min($max_level, ceil($tag['used_count'] / $one_level));						$_tags[$tag['title']] = $tag;		}		$tags = $_tags;		ksort($tags);		return $tags;	}	/**	 * Get film by top views	 * views_day, views_week, views_month, views	*/	protected function _get_ad_model(){		return $this->get_model('Light_Model_Ad');	}	protected function _get_tag_model(){		return $this->get_model('Light_Model_Tag');	}	protected function _get_film_model(){		return $this->get_model('Light_Model_Film');	}	protected function _get_actor_model(){		return $this->get_model('Light_Model_Actor');	}	/**	 * @param	string	block name	 * @param	array	variables to assign	 * @param	boolean	use layout wrapper ?	 * @return 	void	*/	public function response_view($block, array $params = array(), $use_wraper = NULL){		$params += $this->_layout_params;			$page = $this->_input->filter_single('page', Light_Input::UINT);		if($page > 1)		{			$params['page_title'] = 'Trang ' . $page . ': ' . $params['page_title'];		}		$content = $this->view($block);		$content->set($params);		if($use_wraper =='NULL')		{			return $this->response->body($content);		}        switch($use_wraper){            case 2:{                $wrapper = $this->view('sub_layout');                break;            }            case 3:{                $wrapper = $this->view('sub_blank');                break;            }            case 4:{                $wrapper = $this->view('top_footer_layout');                break;            }            default:{                $wrapper = $this->view('layout');                break;            }        }        $wrapper->set($params);        $wrapper->set('content', $content);		//Light_Visitor::instance()->is_admin() AND 		if(isset($_GET['_debug']))		{			// debug			$db = Profiler::groups();			$db = $db['database (default)'];			$count = 0;			foreach($db as $tokens)			{				$count += count($tokens);			}			$total = array(				'memory_usage' => number_format((memory_get_peak_usage() - KOHANA_START_MEMORY) / 1024).'KB',				'execution_time' => number_format(microtime(TRUE) - KOHANA_START_TIME, 5).' seconds'			);						$wrapper->set('querycount', count($db));			$wrapper->set('memory_usage', $total['memory_usage']);			$wrapper->set('execution_time', $total['execution_time']);			$wrapper->set('debug', 1);			if(isset($_GET['_stats']))			{				echo View::factory('profiler/stats');			}		}				$this->response->body($wrapper);		}    public static function _combinPass($str, $value){        switch($value){            case 'encode':{                $hash = "vWYpjQAMNdU5zPOJGF2xaZXSVgL9DIfcB1rCuHt68nysm0i3olbq4EkKewh7TRx";                $key = "ZXTlPv9uMIRhejyzCc3HwGtUiaVSxqYfQpBKmk5DdON2AWJ41nE06gL8soFr7bx";                return strtr(trim($str), $key, $hash);                break;            }            case 'decode':{                $hash = "vWYpjQAMNdU5zPOJGF2xaZXSVgL9DIfcB1rCuHt68nysm0i3olbq4EkKewh7TRx";                $key = "ZXTlPv9uMIRhejyzCc3HwGtUiaVSxqYfQpBKmk5DdON2AWJ41nE06gL8soFr7bx";                return strtr(trim($str), $hash, $key);                break;            }        }    }	/**	 * Block	*/	public function view($block)	{		//return View::factory('frontend/' . Light_Config::get('config.skin.frontend') . '/' . $view);		return Light_Template::create($block);	}} 