<?php defined('SYSPATH') or die('No direct script access.');class Controller_Frontend_Film extends Controller_Frontend {	public function action_index(){		$film_id = $this->_input->filter_single('film_id', Light_Input::UINT);				$fetch_otions = array(			'active_only' => TRUE,			'join'	=> Light_Model_Film::FETCH_COUNTRYINFO | Light_Model_Film::FETCH_USERINFO,		);		if(empty($film_id) OR !$filminfo = $this->_get_film_model()->get_film_by_id($film_id, $fetch_otions))		{			$this->redirect(				Light_Link::build('error', 'action=404', 'path=' . $this->request->uri())			);		}				// check correct url		$url_canonical = Light_Link::film('film', $filminfo, NULL, TRUE, TRUE);		if(Light_Link::film('film', $this->request->param(), NULL, TRUE, TRUE) != $url_canonical)		{				$this->redirect($url_canonical, 301);		}		// embed		#$filminfo['trailer_embed'] = Player::render($filminfo['trailer_url']);		// to beautiful		$filminfo['actors'] = str_replace(',', ', ', $filminfo['actors']);		$filminfo['has_episode'] = $filminfo['episode_latest'] > -1;		// xóa attributes của img		$count = preg_match_all('#<img.+?src=[\'|"](?P<src>https?://[^"\']+)[\'|"].*?/?>#is', $filminfo['pagetext'], $matches);		for($i = 0; $i < $count; $i ++)		{			$filminfo['pagetext'] = str_replace(				$matches[0][$i],				'<img title="'.$filminfo['title'].' - Image '.($i+1).'" alt="'.$filminfo['title'].' - Image '.($i+1).'" src="'.$matches['src'][$i].'" />',				$filminfo['pagetext']			);		}		//$filminfo['pagetext'] = preg_replace('#//img[\d]+\.#', '//a.', $filminfo['pagetext']);		// backup a, img		$count = preg_match_all('#<a[^>]+>.*?</a>|<img[^>]+>#is', $filminfo['pagetext'], $matches);		$replaces = array();		foreach($matches[0] as $a)		{			$replaces[md5($a)] = $a;		}		$filminfo['pagetext'] = str_ireplace(array_values($replaces), array_keys($replaces), $filminfo['pagetext']);		$filminfo['pagetext'] = preg_replace('#(phim)\s+#iu',			'<a href="/" title="$1"><strong>$1</strong></a> ',			$filminfo['pagetext'], 1		);		$filminfo['pagetext'] = preg_replace('#(xem phim)\s+#iu',			'<a href="/" title="$1"><strong>$1</strong></a> ',			 $filminfo['pagetext'], 1		);		$filminfo['pagetext'] = preg_replace('/'.preg_quote($filminfo['title']).'|'.preg_quote($filminfo['title_o']).'/i', '<a href="'.$filminfo['link'].'" title="$0"><strong>$0</strong></a>',$filminfo['pagetext'],1);        $filminfo['pagetext'] = str_replace('Chúc các bạn xem phim', 'Chúc các bạn <a href="http://tronbohd.com" title="Xem Phim"><strong>xem phim</strong></a>', $filminfo['pagetext']);				// restore a, img		$filminfo['pagetext'] = str_replace(array_keys($replaces), array_values($replaces), $filminfo['pagetext']);		//$filminfo['keywords'] = $filminfo['tags'] . implode(',', $filminfo['tags']);		$filminfo = Light_Helper_Film::parse($filminfo, array('tags' => TRUE));		$filminfo = Light_Helper_Film::parse($filminfo, array('actors' => TRUE,'film_id' => $film_id));        if($filminfo['type']==1){            if($filminfo['comingsoon']){                $status = $filminfo['comingsoon'];            }else{                $status = 'Full HD';            }            if($filminfo['title_seo']) {                $title = $filminfo['title_seo'].' '.$filminfo['year'];                $description = $filminfo['description_seo'];                // keyword for search                $keywords = $status.' Phim '.$filminfo['title'].', '. $filminfo['tags']. ", xem phim $filminfo[title], phim $filminfo[title] online, phim $filminfo[title_o]";            }else{                $title = "Phim $filminfo[title] $status | $filminfo[title_o] $filminfo[year] Full";                $description = 'Phim ' . $filminfo['title'] . ' ' . $status . ', ' . $filminfo['title'] . ', ' . $filminfo['title_o'] . ', Full HD, Vietsub, ' . $filminfo['year'] . ': ' . $filminfo['description'];                // keyword for search                $keywords = $status . ' Phim ' . $filminfo['title'] . ', ' . $filminfo['tags'] . ", xem phim $filminfo[title], phim $filminfo[title] online, phim $filminfo[title_o]";            }        }else{            if($filminfo['comingsoon']){                $status = $filminfo['comingsoon'];            }else{                $status = 'Trọn Bộ HD';            }            if($filminfo['title_seo']){                $title = $filminfo['title_seo'].' '.$filminfo['year'];                $description = $filminfo['description_seo'];                // keyword for search                $keywords = 'Phim ' . $filminfo['title'] .' '. $status . ', '.$filminfo['title'].', '.$filminfo['title_o'].', Trọn Bộ, Thuyết Minh, '.$filminfo['year'].': ' . $filminfo['description'];            }else{                $title = "Phim $filminfo[title] $status | $filminfo[title_o] $filminfo[year] Full";                $description = 'Phim ' . $filminfo['title'] .' '. $status . ', '.$filminfo['title'].', '.$filminfo['title_o'].', Trọn Bộ, Thuyết Minh, '.$filminfo['year'].': ' . $filminfo['description'];                // keyword for search                $keywords = $status.' Phim '.$filminfo['title'].', '. $filminfo['tags']. ", xem phim $filminfo[title], phim $filminfo[title] online, phim $filminfo[title_o]";            }        }        if($searched_by_keywords = @unserialize($filminfo['searched_by_keywords']))        {            $keywords .= ',' . implode(',', array_keys(array_slice($searched_by_keywords, 0, 3)));            $keywords = implode(', ', array_unique(explode(',', $keywords)));        }        /*if(Light_Visitor::instance()->group_id == 1){        }*/		$view_params = array(            'page_title'        => $title,			'page_keywords'     =>  $keywords,            'page_description'  => $description,            'admin' 		    => Light_Visitor::instance()->group_id,			'filminfo'          => $filminfo,            'collect'           => json_decode($filminfo['collect'],TRUE),			'url_canonical'     => $url_canonical,            'split_timeLine'     => Light_Helper_Film::split_timeLine($filminfo['timeline'],$filminfo['type'])		);		// check google search		if($keyword = Light_Helper_Film::detect_keyword_from_search())		{			Light_Helper_Film::add_keyword_to_film($filminfo, $keyword);		}				$this->response_view('film', $view_params);	}	public function action_download(){        $film_id = $this->_input->filter_single('film_id', Light_Input::UINT);        $download_id = $this->_input->filter_single('download_id', Light_Input::STRING);        $episode_model = $this->_get_episode_model();        $episodes = $episode_model->get_episodes_by_film_id_for_show($film_id);        $errors = 0;        $require_input = $this->_input->filter(array(            'captcha'	=> Light_Input::STRING,        ));                $fetch_otions = array(			'active_only' => TRUE,			'join'	=> Light_Model_Film::FETCH_COUNTRYINFO | Light_Model_Film::FETCH_USERINFO,		);		if(empty($film_id) OR !$filminfo = $this->_get_film_model()->get_film_by_id($film_id, $fetch_otions))		{			$this->redirect(				Light_Link::build('error', 'action=404', 'path=' . $this->request->uri())			);		}		$url_canonical = Light_Link::film('film', $filminfo, NULL, TRUE, TRUE);		if(Light_Link::film('film', $this->request->param(), NULL, TRUE, TRUE) != $url_canonical)		{			$this->redirect($url_canonical, 301);		}		// embed		#$filminfo['trailer_embed'] = Player::render($filminfo['trailer_url']);		// to beautiful		//$filminfo['actors'] = str_replace(',', ', ', $filminfo['actors']);		$filminfo['has_episode'] = $filminfo['episode_latest'] > -1;		$filminfo = Light_Helper_Film::parse($filminfo, array('tags' => TRUE));		//$filminfo = Light_Helper_Film::parse($filminfo, array('actors' => TRUE,'film_id' => $film_id));        if($this->request->post()){            $validation = Validation::factory($require_input)->rule('captcha',	'not_empty');                        $validation->check();            $messages = $validation->errors('errors');            $errors += count($messages);            if(!Captcha::valid($require_input['captcha'])){                $messages[] = __('Captcha is incorrect.');                $errors++;            }            $messages = array_unique($messages);            if($this->request->is_ajax()){                if(!$errors){                    foreach($episodes as $k=>$episode){                                $video_url = $filminfo["trailer_url"];                        $data = Light_Grab::process($film_id,$episode_id,$video_url,$_SERVER['HTTP_HOST']);                                                if($data!='null'){                                                $data=str_replace('&','?ioskenny',$data);                            $info_film=json_decode($data,true);                            echo '<pre>';                        print_r($info_film[0][link]);                        echo '</pre>';                           /* $episode_info[info_download][encode] = self::_combinPass($episode[video_url],'encode');                            $episode_info[info_download][name] = $episode[name];                            $episode_info[info_download][server] = $episode[server_title];                            $episode_info[info_download][quality] = $vz[quality];*/                        }                        /*if($download_id){                            //foreach($info_film as $kz=>$vz) {                                $episodes_decode = array(                                    $episode_info[info_download][$k][encode] => $vz[url]                                );                            //}                            $link=$episodes_decode[$download_id];                            if($link){                                $this->redirect($link.'&title=TronBoHD.com--'.$episode[title]);                            }                        }*/            }        // Phần Download Phim        }            return $this->response_json(array(                'error' 	=> $errors,                'message' 	=> $messages,                // 'episodes_encode'=>$episode_info[info_download],            ));        }        }       /* $fetch_otions = array(            'active_only' => TRUE,            'join' => Light_Model_Film::FETCH_COUNTRYINFO | Light_Model_Film::FETCH_USERINFO,        );        if (empty($film_id) OR !$filminfo = $this->_get_film_model()->get_film_by_id($film_id, $fetch_otions)) {            $this->redirect(                Light_Link::build('error', 'action=404', 'path=' . $this->request->uri())            );        }        $filminfo = Light_Helper_Film::parse($filminfo, array('tags' => TRUE,'actor'=>TRUE));*/        // check correct url        /*$url_canonical = Light_Link::film('film', $filminfo, NULL, TRUE, TRUE);        if (Light_Link::film('film', $this->request->param(), NULL, TRUE, TRUE) != $url_canonical) {            $this->redirect($url_canonical, 301);        }        $keywords = $filminfo['tags'] . ", xem phim $filminfo[title], phim $filminfo[title] online, phim $filminfo[title_o]";        if ($searched_by_keywords = @unserialize($filminfo['searched_by_keywords'])) {            $keywords .= ',' . implode(',', array_keys(array_slice($searched_by_keywords, 0, 3)));            $keywords = implode(', ', array_unique(explode(',', $keywords)));        }        $filminfo['tags']=explode(',',$filminfo['tags']);        $films_category = $this->_get_film($filminfo[category_ids]);        //$filminfo['keywords'] = $filminfo['tags'] . implode(',', $filminfo['tags']);        //$films_category = $this->_get_film($filminfo['category_ids']);        */              $view_params = array(            'page_title' => "Download phim $filminfo[title] | Tải $filminfo[title_o] $filminfo[year] Full",            'page_keywords' => $keywords,            'filminfo' => $filminfo,            'films_category'=>$films_category,            'episodes'=>$episodes,        );        $this->response_view('download', $view_params,'sub_blank');    }    protected function _get_episode_model()    {        return $this->get_model('Light_Model_Episode');    }} 