<?php defined('SYSPATH') or die('No direct script access.');class Controller_Frontend_Member extends Controller_Frontend {	public function action_login()	{		$user_input = $this->_input->filter(array(			'username' 	=> Light_Input::STRING,			'password'	=> Light_Input::STRING,			'remember'	=> Light_Input::BOOLEAN,		));				$errors = 0;		$messages = array();				if($this->request->post())		{			$validation = Validation::factory($user_input)				->rule('username', 'not_empty')				->rule('password', 'not_empty');			$validation->check();						$messages = $validation->errors('errors');			$errors += count($messages);						if(empty($errors))			{				$auth = Light_Auth::instance();				$login = $auth->login($user_input['username'], $user_input['password'], $user_input['remember']);								$messages += $auth->errors;				$errors += count($auth->errors);								if($this->request->is_ajax())				{					$html = '';					if($login)					{						$html = $this->view('sign_panel')							->set('visitor', Light_Visitor::instance())						->render();					}					return $this->response_json(array(						'error' 	=> $errors,						'message' 	=> $messages,						'html'		=> $html,					));				}			}		}		$view_params = array(			'messages' => $messages,			'user_input' => $user_input,		);			$this->response_view('member/login', $view_params);	}		public function action_editprofile() 	{		$visitor = Light_Visitor::instance();		$user_model = $this->_get_user_model();				// default		$form_value = $visitor->toArray();		$messages = array();		$errors = 0;		$show['form'] = TRUE;				if($visitor->get('user_id') == 0)		{			$messages[] = __('You are not logged in.');			$errors++;			$show['form'] = FALSE;		}		else if ($this->request->post())		{			$form_value = $this->_input->filter(array(				'password'		=> Light_Input::STRING,				'newpassword'	=> Light_Input::STRING,				'newpassword2'	=> Light_Input::STRING,				'email'			=> Light_Input::STRING,				'fullname'		=> Light_Input::STRING,				'birthday'		=> Light_Input::DATETIME,				'sex'			=> Light_Input::UINT,			));			$validation = Validation::factory($form_value)				->rule('password', 		'not_empty')				->rule('newpassword', 	'matches', array(':validation', 'newpassword', 'newpassword2'))				->rule('fullname', 		'not_empty')			;			$validation->check();						$messages = $validation->errors('errors');			$errors += count($messages);						if($user_model->hash_password($form_value['password'], $visitor->get('salt')) != $visitor['password'])			{				$messages[] = __('Password is incorrect.');				$errors++;			}			if(empty($errors))			{				$dw = Light_DataWriter::create('Light_DataWriter_User');				if($form_value['newpassword'])				{					$salt = Light_Helper_String::rand(15, 'salt');					$password = $this->_get_user_model()->hash_password($form_value['newpassword'], $salt);					$dw->set('password', $password);					$dw->set('salt', $salt);				}				unset(					$form_value['password'], 	// do not use real password					$form_value['newpassword'], 					$form_value['newpassword2']				);								$dw->bulk_set($form_value);				$dw->set_existing($visitor->toArray());				$dw->save();								$messages += $dw->errors;				$errors += count($dw->errors);			}				$messages = array_unique($messages);						if(empty($errors))			{				$messages[] = 'Cập nhật thông tin thành công';			}			if($this->request->is_ajax())			{				return $this->response_json(array(					'error' 	=> $errors,					'message' 	=> $messages,					'show'		=> $show,				));			}					}		$form_value['birthday_format'] = array(			'day' => date('d', $form_value['birthday']),			'month' => date('m', $form_value['birthday']),			'year' => date('Y', $form_value['birthday']),		);				$view_params = array(			'page_title' => 'Sửa thông tin cá nhân - ' . $visitor->get('username'),			'form_value' => $form_value,			'messages'	=> $messages,			'show'		=> $show,			'url_canonical' => Light_Link::film('member', $this->request->param(), NULL, TRUE, TRUE),		);		$this->response_view('member/editprofile', $view_params);	}    public function action_request()    {        $require_input = $this->_input->filter(array(            'title' 	=> Light_Input::STRING,            'name'	=> Light_Input::STRING,            'email'		=> Light_Input::STRING,            'message'	=> Light_Input::STRING,            'captcha'	=> Light_Input::STRING,        ));        $messages = array();        $errors = 0;        $show['form'] = TRUE;        $validation = Validation::factory($require_input)            ->rule('title', 	'not_empty')            ->rule('name', 	'not_empty')            ->rule('message', 	'not_empty')            ->rule('captcha',	'not_empty')        ;        $validation->check();        $messages = $validation->errors('errors');        $errors += count($messages);        if( ! Captcha::valid($require_input['captcha']))        {            $messages[] = __('Captcha is incorrect.');            $errors++;        }        else if(empty($errors))        {            $dw = Light_DataWriter::create('Light_DataWriter_Request');            $dw->bulk_set($require_input);            $dw->set('dateline', Light_Application::$time);            $dw->save();            $messages += $dw->errors;            $errors += count($dw->errors);        }        $messages = array_unique($messages);        if(empty($errors))        {            $messages[] = 'Gửi yêu cầu thành công.';        }        if($this->request->is_ajax())        {            return $this->response_json(array(                'error' 	=> $errors,                'message' 	=> $messages,                'show'		=> $show,            ));        }    }	public function action_register()	{		$user_input = $this->_input->filter(array(			'username' 	=> Light_Input::STRING,			'password'	=> Light_Input::STRING,			'password2'	=> Light_Input::STRING,			'email'		=> Light_Input::STRING,			'fullname'	=> Light_Input::STRING,			'birthday'	=> Light_Input::DATETIME,			'sex'		=> Light_Input::UINT,			'captcha'	=> Light_Input::STRING,		));				$messages = array();		$errors = 0;		$show['form'] = TRUE;		$visitor = Light_Visitor::instance();				if($visitor->get('user_id'))		{			$messages[] = __('You are logged in with an account :username.', array(':username' => $visitor->get('username')));			$errors++;			$show['form'] = FALSE;		}		else if($this->request->post())		{			$validation = Validation::factory($user_input)				->rule('username', 	'not_empty')				->rule('password', 	'not_empty')				//->rule('password2', 'not_empty')				//->rule('password2', 'matches', array(':validation', 'password2', 'password'))				->rule('fullname', 	'not_empty')				->rule('captcha',	'not_empty')			;			$validation->check();						$messages = $validation->errors('errors');			$errors += count($messages);						if( ! Captcha::valid($user_input['captcha']))			{				$messages[] = __('Captcha is incorrect.');				$errors++;			}			else if(empty($errors))			{				unset($user_input['password2'], $user_input['captcha']);				$salt = Light_Helper_String::rand(15, 'salt');				$password = $this->_get_user_model()->hash_password($user_input['password'], $salt);				// dw				$dw = Light_DataWriter::create('Light_DataWriter_User');				$dw->bulk_set($user_input);				$dw->set('group_id', 3);				$dw->set('password', $password);				$dw->set('salt', $salt);				$dw->set('register_date', Light_Application::$time);				$dw->save();								$messages += $dw->errors;								$errors += count($dw->errors);			}			$messages = array_unique($messages);						if(empty($errors))			{				$messages[] = 'Đăng ký thành công';			}			if($this->request->is_ajax())			{				return $this->response_json(array(					'error' 	=> $errors,					'message' 	=> $messages,					'show'		=> $show,				));			}		}		$user_input['birthday_format'] = array(			'day' => date('d', $user_input['birthday']),			'month' => date('m', $user_input['birthday']),			'year' => date('Y', $user_input['birthday']),		);		$view_params = array(			'page_title' => "Đăng ký thành viên",			'user_input' => $user_input,			'show'		=> $show,			'messages'	=> $messages,			'url_canonical' => Light_Link::film('member', $this->request->param(), NULL, TRUE, TRUE),		);		$this->response_view('member/register', $view_params);	}		public function action_logout()	{		Light_Auth::instance()->logout();				if($this->request->is_ajax())		{			$html = $this->view('sign_panel')				->set('visitor', Light_Visitor::instance())			->render();				return $this->response_json(array(				'html'		=> $html,			));		}        $this->redirect('/', 301);		//$this->response_view('member/logout');	}	protected function _get_user_model()	{		return $this->get_model('Light_Model_User');	}} 